name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-type-build-test:
    name: Lint, Type Check, Build, Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install backend deps
        working-directory: backend
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Install frontend deps
        working-directory: frontend
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - name: Lint backend
        working-directory: backend
        run: |
          npm run lint --if-present

      - name: Lint frontend
        working-directory: frontend
        run: |
          npm run lint --if-present

      - name: Type-check backend
        working-directory: backend
        run: |
          npm run type-check --if-present || npx tsc --noEmit || true

      - name: Type-check frontend
        working-directory: frontend
        run: |
          npm run type-check --if-present || npx tsc --noEmit

      - name: Build backend
        working-directory: backend
        run: |
          npm run build --if-present || echo "No backend build script"

      - name: Build frontend
        working-directory: frontend
        run: |
          npm run build

      - name: Test backend
        working-directory: backend
        run: |
          npm test --if-present -- --ci --reporters=default --coverage || echo "No backend tests"

      - name: Test frontend
        working-directory: frontend
        run: |
          npm test --if-present -- --ci --reporters=default --coverage || echo "No frontend tests"

  docker-and-audit:
    name: Docker Build and Security Audit
    runs-on: ubuntu-latest
    needs: lint-type-build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install hadolint
        run: |
          wget -qO /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
          chmod +x /usr/local/bin/hadolint

      - name: Lint Dockerfiles
        run: |
          if [ -f backend/Dockerfile ]; then hadolint backend/Dockerfile; fi
          if [ -f frontend/Dockerfile ]; then hadolint frontend/Dockerfile; fi

      - name: Build backend image
        if: hashFiles('backend/Dockerfile') != ''
        run: docker build -t app-backend:ci backend

      - name: Build frontend image
        if: hashFiles('frontend/Dockerfile') != ''
        run: docker build -t app-frontend:ci frontend

      - name: Backend production audit
        working-directory: backend
        run: |
          if [ -f package-lock.json ]; then npm ci --omit=dev; else npm install --omit=dev; fi
          npm audit --production --audit-level=high || true

      - name: Frontend production audit
        working-directory: frontend
        run: |
          if [ -f package-lock.json ]; then npm ci --omit=dev; else npm install --omit=dev; fi
          npm audit --production --audit-level=high || true
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm install
      env:
        MONGODB_URI: mongodb://localhost:27017/test
        JWT_SECRET: test-secret
        NODE_ENV: test
    
    - name: Check backend scripts
      run: |
        cd backend
        npm run
      continue-on-error: true
    
    - name: Run backend tests (if available)
      run: |
        cd backend
        if npm run | grep -q "test"; then
          npm test
        else
          echo "No test script found, skipping tests"
        fi
      env:
        MONGODB_URI: mongodb://localhost:27017/test
        JWT_SECRET: test-secret
        NODE_ENV: test

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm install
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
      env:
        NEXT_PUBLIC_API_BASE: http://localhost:4000

  # lint job removed per request

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        cd backend && npm install
        cd ../frontend && npm install
    
    - name: Run security audit
      run: |
        cd backend && npm audit --audit-level moderate || true
        cd ../frontend && npm audit --audit-level moderate || true

