name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.4)'
        required: true
        type: string

permissions:
  contents: write
  actions: read
  pull-requests: write
  issues: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify project structure
      run: |
        echo "Project structure:"
        ls -la
        echo "Backend files:"
        ls -la backend/
        echo "Frontend files:"
        ls -la frontend/
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Get version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Extract changelog for version
      id: changelog
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        # Remove 'v' prefix if present for matching
        VERSION_NUM=${VERSION#v}
        
        # Extract changelog content for this version
        CHANGELOG_CONTENT=$(awk "/^## \[$VERSION_NUM\]/,/^## \[/ {if(/^## \[/ && !/^## \[$VERSION_NUM\]/) exit; print}" CHANGELOG.md | sed '1d' | sed '$d')
        
        # If no content found, try with 'v' prefix
        if [ -z "$CHANGELOG_CONTENT" ]; then
          CHANGELOG_CONTENT=$(awk "/^## \[$VERSION\]/,/^## \[/ {if(/^## \[/ && !/^## \[$VERSION\]/) exit; print}" CHANGELOG.md | sed '1d' | sed '$d')
        fi
        
        # If still no content, use a default message
        if [ -z "$CHANGELOG_CONTENT" ]; then
          CHANGELOG_CONTENT="### Changelog:\n\nRelease $VERSION - See CHANGELOG.md for details."
        fi
        
        # Escape newlines for GitHub
        CHANGELOG_CONTENT=$(echo "$CHANGELOG_CONTENT" | sed ':a;N;$!ba;s/\n/\\n/g')
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Install dependencies
      run: |
        echo "Installing backend dependencies..."
        cd backend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
        
        echo "Installing frontend dependencies..."
        cd ../frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Build backend
      run: |
        cd backend
        npm run build || echo "No build script found, using source files"
        
    - name: Create backend package
      run: |
        mkdir -p packages
        cd packages
        
        # Create backend package
        mkdir -p backend-package/backend
        cp -r ../backend/src backend-package/backend/
        cp -r ../backend/scripts backend-package/backend/ 2>/dev/null || echo "No scripts directory found"
        cp ../backend/package.json backend-package/backend/
        cp ../backend/env.example backend-package/backend/ 2>/dev/null || echo "No env.example found"
        cp ../backend/Dockerfile backend-package/backend/ 2>/dev/null || echo "No Dockerfile found"
        # Ensure no lock files or build artifacts
        find backend-package -name "package-lock.json" -type f -delete || true
        find backend-package -name "node_modules" -type d -prune -exec rm -rf {} + || true
        find backend-package -name "dist" -type d -prune -exec rm -rf {} + || true
        
        # Add version info
        echo '{"version": "${{ steps.version.outputs.version }}", "buildDate": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "packageType": "backend"}' > backend-package/version.json
        
        # Create tar.gz
        tar -czf backend-${{ steps.version.outputs.version }}.tar.gz -C backend-package .
        
    - name: Create frontend package
      run: |
        cd packages
        
        # Create frontend package
        mkdir -p frontend-package/frontend
        cp -r ../frontend/src frontend-package/frontend/
        cp -r ../frontend/public frontend-package/frontend/ 2>/dev/null || echo "No public directory found"
        cp ../frontend/package.json frontend-package/frontend/
        cp ../frontend/next.config.ts frontend-package/frontend/ 2>/dev/null || echo "No next.config.ts found"
        cp ../frontend/tsconfig.json frontend-package/frontend/ 2>/dev/null || echo "No tsconfig.json found"
        cp ../frontend/env.example frontend-package/frontend/ 2>/dev/null || echo "No env.example found"
        cp ../frontend/eslint.config.mjs frontend-package/frontend/ 2>/dev/null || echo "No eslint.config.mjs found"
        cp ../frontend/postcss.config.mjs frontend-package/frontend/ 2>/dev/null || echo "No postcss.config.mjs found"
        cp ../frontend/next-env.d.ts frontend-package/frontend/ 2>/dev/null || echo "No next-env.d.ts found"
        cp ../frontend/Dockerfile frontend-package/frontend/ 2>/dev/null || echo "No Dockerfile found"
        # Ensure no lock files or build artifacts
        find frontend-package -name "package-lock.json" -type f -delete || true
        find frontend-package -name ".next" -type d -prune -exec rm -rf {} + || true
        find frontend-package -name "node_modules" -type d -prune -exec rm -rf {} + || true
        find frontend-package -name "dist" -type d -prune -exec rm -rf {} + || true
        
        # Add version info
        echo '{"version": "${{ steps.version.outputs.version }}", "buildDate": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "packageType": "frontend"}' > frontend-package/version.json
        
        # Create tar.gz
        tar -czf frontend-${{ steps.version.outputs.version }}.tar.gz -C frontend-package .
        
    - name: Create full package
      run: |
        cd packages
        
        # Create full package
        mkdir -p full-package
        mkdir -p full-package/backend
        cp -r ../backend/src full-package/backend/
        cp -r ../backend/scripts full-package/backend/ 2>/dev/null || echo "No scripts directory found"
        cp ../backend/package.json full-package/backend/
        
        mkdir -p full-package/frontend
        cp -r ../frontend/src full-package/frontend/
        cp -r ../frontend/public full-package/frontend/ 2>/dev/null || echo "No public directory found"
        cp ../frontend/package.json full-package/frontend/
        cp ../frontend/next.config.ts full-package/frontend/ 2>/dev/null || echo "No next.config.ts found"
        cp ../frontend/tsconfig.json full-package/frontend/ 2>/dev/null || echo "No tsconfig.json found"
        cp ../frontend/env.example full-package/frontend/ 2>/dev/null || echo "No env.example found"
        cp ../frontend/eslint.config.mjs full-package/frontend/ 2>/dev/null || echo "No eslint.config.mjs found"
        cp ../frontend/postcss.config.mjs full-package/frontend/ 2>/dev/null || echo "No postcss.config.mjs found"
        cp ../frontend/next-env.d.ts full-package/frontend/ 2>/dev/null || echo "No next-env.d.ts found"
        cp ../frontend/Dockerfile full-package/frontend/ 2>/dev/null || echo "No Dockerfile found"
        # Clean unwanted files
        find full-package -name "package-lock.json" -type f -delete || true
        find full-package -name ".next" -type d -prune -exec rm -rf {} + || true
        find full-package -name "node_modules" -type d -prune -exec rm -rf {} + || true
        find full-package -name "dist" -type d -prune -exec rm -rf {} + || true
        
        # Add installation scripts
        echo '#!/bin/bash' > full-package/install.sh
        echo 'set -e' >> full-package/install.sh
        echo '' >> full-package/install.sh
        echo 'echo "Installing PteroDash $1..."' >> full-package/install.sh
        echo '' >> full-package/install.sh
        echo '# Install backend dependencies' >> full-package/install.sh
        echo 'echo "Installing backend dependencies..."' >> full-package/install.sh
        echo 'cd backend' >> full-package/install.sh
        echo 'npm ci --production' >> full-package/install.sh
        echo '' >> full-package/install.sh
        echo '# Install frontend dependencies' >> full-package/install.sh
        echo 'echo "Installing frontend dependencies..."' >> full-package/install.sh
        echo 'cd ../frontend' >> full-package/install.sh
        echo 'npm ci --production' >> full-package/install.sh
        echo '' >> full-package/install.sh
        echo '# Build frontend' >> full-package/install.sh
        echo 'echo "Building frontend..."' >> full-package/install.sh
        echo 'npm run build' >> full-package/install.sh
        echo '' >> full-package/install.sh
        echo 'echo "Installation complete!"' >> full-package/install.sh
        echo 'echo "To start the application:"' >> full-package/install.sh
        echo 'echo "  Backend: cd backend && npm start"' >> full-package/install.sh
        echo 'echo "  Frontend: cd frontend && npm start"' >> full-package/install.sh
        chmod +x full-package/install.sh
        
        # Add version info
        echo '{"version": "${{ steps.version.outputs.version }}", "buildDate": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "packageType": "full"}' > full-package/version.json
        
        # Create tar.gz
        tar -czf full-${{ steps.version.outputs.version }}.tar.gz -C full-package .
        
    - name: Create Release and Upload Packages
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          packages/backend-${{ steps.version.outputs.version }}.tar.gz
          packages/frontend-${{ steps.version.outputs.version }}.tar.gz
          packages/full-${{ steps.version.outputs.version }}.tar.gz
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## PteroDash ${{ steps.version.outputs.version }}
          
          ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
        generate_release_notes: true
        overwrite: true
        fail_on_unmatched_files: false
