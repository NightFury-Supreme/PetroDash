name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.4)'
        required: true
        type: string

permissions:
  contents: write
  actions: read
  pull-requests: write
  issues: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify project structure
      run: |
        echo "Project structure:"
        ls -la
        echo "Backend files:"
        ls -la backend/
        echo "Frontend files:"
        ls -la frontend/
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Get version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Install dependencies
      run: |
        echo "Installing backend dependencies..."
        cd backend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
        
        echo "Installing frontend dependencies..."
        cd ../frontend
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Build backend
      run: |
        cd backend
        npm run build || echo "No build script found, using source files"
        
    - name: Create backend package
      run: |
        mkdir -p packages
        cd packages
        
        # Create backend package
        mkdir -p backend-package
        cp -r ../backend/src backend-package/
        cp ../backend/package.json backend-package/
        cp ../backend/package-lock.json backend-package/ 2>/dev/null || echo "No package-lock.json found"
        
        # Add version info
        echo '{"version": "${{ steps.version.outputs.version }}", "buildDate": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "packageType": "backend"}' > backend-package/version.json
        
        # Create tar.gz
        tar -czf backend-${{ steps.version.outputs.version }}.tar.gz -C backend-package .
        
    - name: Create frontend package
      run: |
        cd packages
        
        # Create frontend package
        mkdir -p frontend-package
        cp -r ../frontend/.next frontend-package/
        cp -r ../frontend/public frontend-package/ 2>/dev/null || echo "No public directory found"
        cp ../frontend/package.json frontend-package/
        cp ../frontend/package-lock.json frontend-package/ 2>/dev/null || echo "No package-lock.json found"
        cp ../frontend/next.config.js frontend-package/ 2>/dev/null || echo "No next.config.js found"
        
        # Add version info
        echo '{"version": "${{ steps.version.outputs.version }}", "buildDate": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "packageType": "frontend"}' > frontend-package/version.json
        
        # Create tar.gz
        tar -czf frontend-${{ steps.version.outputs.version }}.tar.gz -C frontend-package .
        
    - name: Create full package
      run: |
        cd packages
        
        # Create full package
        mkdir -p full-package
        cp -r ../backend/src full-package/backend/
        cp ../backend/package.json full-package/backend/
        cp ../backend/package-lock.json full-package/backend/ 2>/dev/null || echo "No package-lock.json found"
        
        cp -r ../frontend/.next full-package/frontend/
        cp -r ../frontend/public full-package/frontend/ 2>/dev/null || echo "No public directory found"
        cp ../frontend/package.json full-package/frontend/
        cp ../frontend/package-lock.json full-package/frontend/ 2>/dev/null || echo "No package-lock.json found"
        cp ../frontend/next.config.js full-package/frontend/ 2>/dev/null || echo "No next.config.js found"
        
        # Add installation scripts
        echo '#!/bin/bash' > full-package/install.sh
        echo 'set -e' >> full-package/install.sh
        echo '' >> full-package/install.sh
        echo 'echo "Installing PteroDash $1..."' >> full-package/install.sh
        echo '' >> full-package/install.sh
        echo '# Install backend dependencies' >> full-package/install.sh
        echo 'echo "Installing backend dependencies..."' >> full-package/install.sh
        echo 'cd backend' >> full-package/install.sh
        echo 'npm ci --production' >> full-package/install.sh
        echo '' >> full-package/install.sh
        echo '# Install frontend dependencies' >> full-package/install.sh
        echo 'echo "Installing frontend dependencies..."' >> full-package/install.sh
        echo 'cd ../frontend' >> full-package/install.sh
        echo 'npm ci --production' >> full-package/install.sh
        echo '' >> full-package/install.sh
        echo 'echo "Installation complete!"' >> full-package/install.sh
        echo 'echo "To start the application:"' >> full-package/install.sh
        echo 'echo "  Backend: cd backend && npm start"' >> full-package/install.sh
        echo 'echo "  Frontend: cd frontend && npm start"' >> full-package/install.sh
        chmod +x full-package/install.sh
        
        # Add version info
        echo '{"version": "${{ steps.version.outputs.version }}", "buildDate": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'", "packageType": "full"}' > full-package/version.json
        
        # Create tar.gz
        tar -czf full-${{ steps.version.outputs.version }}.tar.gz -C full-package .
        
    - name: Create Release and Upload Packages
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          packages/backend-${{ steps.version.outputs.version }}.tar.gz
          packages/frontend-${{ steps.version.outputs.version }}.tar.gz
          packages/full-${{ steps.version.outputs.version }}.tar.gz
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## PteroDash ${{ steps.version.outputs.version }}
          
          ### Changelog:
          
          #### Added
          - **Automated Release System**: Complete GitHub Actions workflow for package distribution
            - GitHub Actions workflow (`.github/workflows/release.yml`) for automated releases
            - Creates 3 distinct packages: backend, frontend, and full application
            - Automatic version detection from Git tags with manual workflow dispatch support
            - Package-specific builds with proper dependency management
            - Installation scripts for full package deployment
          - **Package-Based Update System**: Enhanced update mechanism using backend packages
            - Backend update system now downloads and uses specific backend packages
            - Improved update process with package asset detection and validation
            - Enhanced backup system with backend-specific backups
            - Cleaner installation using `npm ci --production` for faster, reliable updates
            - Package information display in admin UI (package name, size, download progress)
          - **Release Management**: Comprehensive release and deployment system
            - Backend package (`backend-vX.X.X.tar.gz`) for backend-only updates
            - Frontend package (`frontend-vX.X.X.tar.gz`) for frontend-only deployment
            - Full package (`full-vX.X.X.tar.gz`) with installation script for complete setup
            - Version information embedded in each package for tracking
            - Release notes and package metadata in GitHub releases
          
          #### Enhanced
          - **Update System UI**: Improved admin interface for update management
            - Package information display showing package name and size
            - Better progress tracking with detailed status updates
            - Enhanced error handling with more descriptive error messages
            - Improved visual feedback during update process
          - **Backend Update Process**: More robust and reliable update mechanism
            - Package-specific download and extraction process
            - Better error handling for missing packages or failed downloads
            - Improved backup creation and restoration capabilities
            - Enhanced dependency installation with production-only packages
          
          #### Technical Improvements
          - **GitHub Integration**: Seamless integration with GitHub releases
            - Automatic package upload to GitHub releases
            - Asset detection and validation for backend packages
            - Proper error handling for missing or invalid packages
            - Rate limiting and authentication for update endpoints
          - **Package Structure**: Optimized package organization
            - Clean separation of backend, frontend, and full packages
            - Proper dependency management in each package
            - Version tracking and metadata in package files
            - Installation scripts for automated deployment
        draft: false
        prerelease: false
        generate_release_notes: true
        overwrite: true
        fail_on_unmatched_files: false
